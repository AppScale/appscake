#!/usr/bin/ruby
# Author: Hiranya Jayathilaka (hiranya@cs.ucsb.edu)
# AppsCake web interface for deploying and launching AppScale clouds
# AppsCake = Makes deploying AppScale a 'piece of cake'

require 'rubygems'
require 'sinatra/base'
require 'webrick'
require 'webrick/https'
require 'openssl'

CERT_DIR = File.expand_path(File.join(File.dirname(__FILE__), "..", "certificates"))

LIB_DIR = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
$:.unshift LIB_DIR
require 'appscake_utils'

APPSCAKE_PORT = 28443
if (ARGV.length != 0 and ARGV.length != 2) or (ARGV.length == 2 and ARGV[0] != '-p')
  puts "Usage: appscake [-p port]"
  exit 1
elsif ARGV.length == 2
  APPSCAKE_PORT = ARGV[1].to_i
end

puts "\nAppsCake - Makes deploying AppScale a 'piece of cake'!\n"
puts "Using port #{APPSCAKE_PORT}...\n\n"

class AppsCake < Sinatra::Base
  set :views, settings.root + '/../views'
  set :public_folder, settings.root + '/../public'

  get '/' do
    erb :index
  end

  post '/virtual.do' do
    if locked?
      return report_error("Server Busy", "AppsCake is currently busy deploying a cloud." +
          " Please try again later.")
    end

    status, yaml_result, yaml = validate_yaml(params[:ips])
    if !status
      return report_error("IP Configuration Error", yaml_result)
    end

    status,acc_result = validate_appscale_credentials(params[:virtual_user],
                                                      params[:virtual_pass], params[:virtual_pass2])
    if !status
      return report_error("AppScale Administrator Account Configuration Error", acc_result)
    end

    status,ssh_result = validate_ssh_credentials(params[:virtual_keyname], params[:root_password], yaml)
    if !status
      return report_error("AppScale SSH Configuration Error", ssh_result)
    end

    add_key_options = {
        'ips' => yaml,
        'keyname' => params[:virtual_keyname],
        'auto' => true,
        'root_password' => params[:root_password]
    }

    app_name = nil
    file_location = nil
    if !params[:target_app].nil? and params[:target_app] != '_none_'
      puts params[:target_app]
      app_name = params[:target_app]
      file_location = File.join(File.dirname(__FILE__), "..",
                                "repository", params[:target_app])
    end

    run_instances_options = {
        'ips' => yaml,
        'keyname' => params[:virtual_keyname],
        'file_location' => file_location,
        'appname' => app_name,
        'appengine' => 1,
        'autoscale' => true,
        'separate' => false,
        'confirm' => false,
        'table' => 'cassandra',
        'infrastructure' => nil,
        'admin_user' => params[:virtual_user],
        'admin_pass' => params[:virtual_pass]
    }

    result = deploy_on_virtual_cluster(params, add_key_options, run_instances_options)
    if result[0]
      @timestamp = result[1]
      @pid = result[2]
      @html = yaml_result
      return erb :success
    else
      report_error(result[1], result[2])
    end
  end

  post '/iaas_ec2.do' do
    status, result = validate_iaas_cluster_settings(params[:min], params[:max], params[:ami])
    if !status
      return report_error("Cluster Configuration Error", result)
    end

    status, result = validate_ec2_credentials(params[:username], params[:access_key],
                                              params[:secret_key], params[:region])
    if !status
      return report_error("EC2 Security Configuration Error", result)
    end

    status, result = validate_iaas_certificate_uploads(params[:username], params[:private_key],
                                                      params[:cert])
    if !status
      return report_error("EC2 Security Configuration Error", result)
    end
    cert_timestamp = result

    status,acc_result = validate_appscale_credentials(params[:ec2_user],
                                                      params[:ec2_pass], params[:ec2_pass2])
    if !status
      return report_error("AppScale Administrator Account Configuration Error", acc_result)
    end

    app_name = nil
    file_location = nil
    if !params[:target_app].nil? and params[:target_app] != '_none_'
      app_name = params[:target_app]
      file_location = File.join(File.dirname(__FILE__), "..", "repository", params[:target_app])
    end

    run_instances_options = {
        'keyname' => params[:ec2_keyname],
        'group' => params[:ec2_keyname],
        'file_location' => file_location,
        'appname' => app_name,
        'appengine' => 1,
        'autoscale' => true,
        'separate' => false,
        'confirm' => false,
        'table' => 'cassandra',
        'infrastructure' => 'ec2',
        'min_images' => params[:min].to_i,
        'max_images' => params[:max].to_i,
        'instance_type' => params[:instance_type],
        'machine' => params[:ami],
        'admin_user' => params[:ec2_user],
        'admin_pass' => params[:ec2_pass],
    }
    result = deploy_on_ec2(params, run_instances_options, cert_timestamp)
    if result[0]
      @timestamp = result[1]
      @pid = result[2]
      @html = ""
      return erb :success
    else
      report_error(result[1], result[2])
    end
  end

  post '/iaas_euca.do' do
    status, result = validate_iaas_cluster_settings(params[:euca_min], params[:euca_max], params[:euca_emi])
    if !status
      return report_error("Cluster Configuration Error", result)
    end

    status, result = validate_euca_credentials(params[:euca_username], params[:euca_access_key],
                                              params[:euca_secret_key], params[:euca_url],
                                              params[:euca_walrus_url])
    if !status
      return report_error("Eucalyptus Configuration Error", result)
    end

    status, result = validate_iaas_certificate_uploads(params[:euca_username], params[:euca_private_key],
                                                      params[:euca_cert])
    if !status
      return report_error("Eucalyptus Security Configuration Error", result)
    end
    cert_timestamp = result

    status,acc_result = validate_appscale_credentials(params[:euca_user],
                                                      params[:euca_pass], params[:euca_pass2])
    if !status
      return report_error("AppScale Administrator Account Configuration Error", acc_result)
    end

    app_name = nil
    file_location = nil
    if !params[:target_app].nil? and params[:target_app] != '_none_'
      app_name = params[:target_app]
      file_location = File.join(File.dirname(__FILE__), "..", "repository", params[:target_app])
    end

    run_instances_options = {
        'keyname' => params[:euca_keyname],
        'group' => params[:euca_keyname],
        'file_location' => file_location,
        'appname' => app_name,
        'appengine' => 1,
        'autoscale' => true,
        'separate' => false,
        'confirm' => false,
        'table' => 'cassandra',
        'infrastructure' => 'euca',
        'min_images' => params[:euca_min].to_i,
        'max_images' => params[:euca_max].to_i,
        'instance_type' => params[:euca_instance_type],
        'machine' => params[:euca_emi],
        'admin_user' => params[:euca_user],
        'admin_pass' => params[:euca_pass],
    }
    result = deploy_on_eucalyptus(params, run_instances_options, cert_timestamp)
    if result[0]
      @timestamp = result[1]
      @pid = result[2]
      @html = ""
      return erb :success
    else
      report_error(result[1], result[2])
    end
  end

  get '/view_logs' do
    timestamp = params[:ts]
    if timestamp.nil? or timestamp.length == 0
      return report_error("Invalid URL Request", "No timestamp information found in the request")
    end
    @timestamp = timestamp
    erb :view_log
  end
end

if check_and_generate_certificates
  webrick_options = {
      :Port               => APPSCAKE_PORT,
      :Logger             => WEBrick::Log::new($stderr, WEBrick::Log::INFO),
      :DocumentRoot       => "/ruby/htdocs",
      :SSLEnable          => true,
      :SSLVerifyClient    => OpenSSL::SSL::VERIFY_NONE,
      :SSLCertificate     => OpenSSL::X509::Certificate.new(
          File.open(File.join(CERT_DIR, "cert-appscake.pem")).read),
      :SSLPrivateKey      => OpenSSL::PKey::RSA.new(
          File.open(File.join(CERT_DIR, "pk-appscake.pem")).read),
      :SSLCertName        => [["CN", WEBrick::Utils::getservername]],
      :app                => AppsCake,
      :server             => 'webrick'
  }

  Rack::Server.start webrick_options

  at_exit do
    puts "Terminating AppsCake..."
  end
else
  puts "Error while loading SSL certificates"
end
